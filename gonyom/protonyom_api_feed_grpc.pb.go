// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: protonyom_api_feed.proto

package gonyom

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedApiClient is the client API for FeedApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedApiClient interface {
	AddFeed(ctx context.Context, in *AddFeedRequest, opts ...grpc.CallOption) (*AddFeedReply, error)
	GetFeeds(ctx context.Context, in *GetFeedsRequest, opts ...grpc.CallOption) (*GetFeedsReply, error)
	DeleteFeed(ctx context.Context, in *DeleteFeedRequest, opts ...grpc.CallOption) (*DeleteFeedReply, error)
	UpdateFeed(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption) (*UpdateFeedReply, error)
}

type feedApiClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedApiClient(cc grpc.ClientConnInterface) FeedApiClient {
	return &feedApiClient{cc}
}

func (c *feedApiClient) AddFeed(ctx context.Context, in *AddFeedRequest, opts ...grpc.CallOption) (*AddFeedReply, error) {
	out := new(AddFeedReply)
	err := c.cc.Invoke(ctx, "/protonyom.FeedApi/AddFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedApiClient) GetFeeds(ctx context.Context, in *GetFeedsRequest, opts ...grpc.CallOption) (*GetFeedsReply, error) {
	out := new(GetFeedsReply)
	err := c.cc.Invoke(ctx, "/protonyom.FeedApi/GetFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedApiClient) DeleteFeed(ctx context.Context, in *DeleteFeedRequest, opts ...grpc.CallOption) (*DeleteFeedReply, error) {
	out := new(DeleteFeedReply)
	err := c.cc.Invoke(ctx, "/protonyom.FeedApi/DeleteFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedApiClient) UpdateFeed(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption) (*UpdateFeedReply, error) {
	out := new(UpdateFeedReply)
	err := c.cc.Invoke(ctx, "/protonyom.FeedApi/UpdateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedApiServer is the server API for FeedApi service.
// All implementations must embed UnimplementedFeedApiServer
// for forward compatibility
type FeedApiServer interface {
	AddFeed(context.Context, *AddFeedRequest) (*AddFeedReply, error)
	GetFeeds(context.Context, *GetFeedsRequest) (*GetFeedsReply, error)
	DeleteFeed(context.Context, *DeleteFeedRequest) (*DeleteFeedReply, error)
	UpdateFeed(context.Context, *UpdateFeedRequest) (*UpdateFeedReply, error)
	mustEmbedUnimplementedFeedApiServer()
}

// UnimplementedFeedApiServer must be embedded to have forward compatible implementations.
type UnimplementedFeedApiServer struct {
}

func (UnimplementedFeedApiServer) AddFeed(context.Context, *AddFeedRequest) (*AddFeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeed not implemented")
}
func (UnimplementedFeedApiServer) GetFeeds(context.Context, *GetFeedsRequest) (*GetFeedsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeds not implemented")
}
func (UnimplementedFeedApiServer) DeleteFeed(context.Context, *DeleteFeedRequest) (*DeleteFeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeed not implemented")
}
func (UnimplementedFeedApiServer) UpdateFeed(context.Context, *UpdateFeedRequest) (*UpdateFeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeed not implemented")
}
func (UnimplementedFeedApiServer) mustEmbedUnimplementedFeedApiServer() {}

// UnsafeFeedApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedApiServer will
// result in compilation errors.
type UnsafeFeedApiServer interface {
	mustEmbedUnimplementedFeedApiServer()
}

func RegisterFeedApiServer(s grpc.ServiceRegistrar, srv FeedApiServer) {
	s.RegisterService(&FeedApi_ServiceDesc, srv)
}

func _FeedApi_AddFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedApiServer).AddFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protonyom.FeedApi/AddFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedApiServer).AddFeed(ctx, req.(*AddFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedApi_GetFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedApiServer).GetFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protonyom.FeedApi/GetFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedApiServer).GetFeeds(ctx, req.(*GetFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedApi_DeleteFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedApiServer).DeleteFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protonyom.FeedApi/DeleteFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedApiServer).DeleteFeed(ctx, req.(*DeleteFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedApi_UpdateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedApiServer).UpdateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protonyom.FeedApi/UpdateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedApiServer).UpdateFeed(ctx, req.(*UpdateFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedApi_ServiceDesc is the grpc.ServiceDesc for FeedApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protonyom.FeedApi",
	HandlerType: (*FeedApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFeed",
			Handler:    _FeedApi_AddFeed_Handler,
		},
		{
			MethodName: "GetFeeds",
			Handler:    _FeedApi_GetFeeds_Handler,
		},
		{
			MethodName: "DeleteFeed",
			Handler:    _FeedApi_DeleteFeed_Handler,
		},
		{
			MethodName: "UpdateFeed",
			Handler:    _FeedApi_UpdateFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protonyom_api_feed.proto",
}
