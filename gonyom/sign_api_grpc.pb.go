// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: proto/sign_api.proto

package gonyom

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignApiClient is the client API for SignApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignApiClient interface {
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInReply, error)
	SignOut(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*EmptyParams, error)
}

type signApiClient struct {
	cc grpc.ClientConnInterface
}

func NewSignApiClient(cc grpc.ClientConnInterface) SignApiClient {
	return &signApiClient{cc}
}

func (c *signApiClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInReply, error) {
	out := new(SignInReply)
	err := c.cc.Invoke(ctx, "/protonyom.SignApi/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signApiClient) SignOut(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*EmptyParams, error) {
	out := new(EmptyParams)
	err := c.cc.Invoke(ctx, "/protonyom.SignApi/SignOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignApiServer is the server API for SignApi service.
// All implementations must embed UnimplementedSignApiServer
// for forward compatibility
type SignApiServer interface {
	SignIn(context.Context, *SignInRequest) (*SignInReply, error)
	SignOut(context.Context, *EmptyParams) (*EmptyParams, error)
	mustEmbedUnimplementedSignApiServer()
}

// UnimplementedSignApiServer must be embedded to have forward compatible implementations.
type UnimplementedSignApiServer struct {
}

func (UnimplementedSignApiServer) SignIn(context.Context, *SignInRequest) (*SignInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedSignApiServer) SignOut(context.Context, *EmptyParams) (*EmptyParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedSignApiServer) mustEmbedUnimplementedSignApiServer() {}

// UnsafeSignApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignApiServer will
// result in compilation errors.
type UnsafeSignApiServer interface {
	mustEmbedUnimplementedSignApiServer()
}

func RegisterSignApiServer(s grpc.ServiceRegistrar, srv SignApiServer) {
	s.RegisterService(&SignApi_ServiceDesc, srv)
}

func _SignApi_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignApiServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protonyom.SignApi/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignApiServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignApi_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignApiServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protonyom.SignApi/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignApiServer).SignOut(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

// SignApi_ServiceDesc is the grpc.ServiceDesc for SignApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protonyom.SignApi",
	HandlerType: (*SignApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _SignApi_SignIn_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _SignApi_SignOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sign_api.proto",
}
